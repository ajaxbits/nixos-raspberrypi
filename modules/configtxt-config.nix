# This file is a modified version of config.txt generator
# Licensed under the terms of MIT License
# https://raw.githubusercontent.com/nix-community/raspberry-pi-nix/refs/heads/master/rpi/config.nix
# with modifications
# https://raw.githubusercontent.com/nvmd/raspberry-pi-nix/refs/heads/master/rpi/config.nix

{ lib, config, pkgs, ... }:
let
  cfg = config.hardware.raspberry-pi;

  render-raspberrypi-config = let

    render-options = opts:
      lib.strings.concatStringsSep "\n" (render-dt-kvs opts);
    render-dt-param = x: "dtparam=" + x;
    render-dt-kv = k: v:
      if isNull v.value then k
      else "${k}=${toString v.value}";

    render-dt-kvs = x:
      lib.attrsets.mapAttrsToList render-dt-kv
        (lib.filterAttrs (k: v: v.enable) x);

    render-dt-params = params:
      lib.strings.concatMapStringsSep "\n" render-dt-param (render-dt-kvs params);

    render-dt-overlay = { overlay, params }:
      lib.concatStringsSep "\n" (lib.filter (x: x != "") [
        ("dtoverlay=" + overlay)
        (render-dt-params params)
        "dtoverlay="
      ]);

    render-base-dt-params = render-dt-params;

    render-dt-overlays = overlays:
      lib.strings.concatMapStringsSep "\n" render-dt-overlay
        (lib.attrsets.mapAttrsToList
          (overlay: params: {
            inherit overlay;
            inherit (params) params;
          })
          (lib.filterAttrs (k: v: v.enable) overlays));

    render-config-section = conditionalFilter:
      { options, base-dt-params, dt-overlays }:
      let all-config = lib.concatStringsSep "\n" (lib.filter (x: x != "") [
          (render-options options)
          (render-base-dt-params base-dt-params)
          (render-dt-overlays dt-overlays)
        ]);
      in ''
        [${conditionalFilter}]
        ${all-config}
      '';
  in conf: lib.strings.concatStringsSep "\n"
      ((lib.attrsets.mapAttrsToList render-config-section conf)
      ++ [ cfg.extra-config ]);
in {
  options.hardware.raspberry-pi = {
    config = let
      rpi-config-param = {
        options = {
          enable = lib.mkEnableOption "attr";
          value =
            lib.mkOption { type = with lib.types; oneOf [ int str bool ]; };
        };
      };
      dt-param = {
        options = {
          enable = lib.mkEnableOption "attr";
          value = lib.mkOption {
            type = with lib.types; nullOr (oneOf [ int str bool ]);
            default = null;
          };
        };
      };
      dt-overlay = {
        options = {
          enable = lib.mkEnableOption "overlay";
          params = lib.mkOption {
            type = with lib.types; attrsOf (submodule dt-param);
          };
        };
      };
      raspberry-pi-config-options = {
        options = {
          options = lib.mkOption {
            type = with lib.types; attrsOf (submodule rpi-config-param);
            default = { };
            example = {
              enable_gic = {
                enable = true;
                value = true;
              };
              arm_boost = {
                enable = true;
                value = true;
              };
            };
          };
          base-dt-params = lib.mkOption {
            type = with lib.types; attrsOf (submodule rpi-config-param);
            default = { };
            example = {
              i2c = {
                enable = true;
                value = "on";
              };
              audio = {
                enable = true;
                value = "on";
              };
            };
            description = "parameters to pass to the base dtb";
          };
          dt-overlays = lib.mkOption {
            type = with lib.types; attrsOf (submodule dt-overlay);
            default = { };
            example = {
              vc4-kms-v3d = {
                enable = true;
                params = { 
                  cma-256 = {
                    enable = true;
                    # value = "";
                  };
                };
              };
            };
            description = "dtb overlays to apply";
          };
        };
      };
    in lib.mkOption {
      type = with lib.types; attrsOf (submodule raspberry-pi-config-options);
    };

    extra-config = lib.mkOption {
      default = "";
      type = lib.types.lines;
      description = ''
        Extra options that will be appended to `/boot/config.txt` file.
        For possible values, see: https://www.raspberrypi.com/documentation/computers/config_txt.html
      '';
    };

    config-generated = lib.mkOption {
      type = lib.types.str;
      description = "the config text generated by raspberrypi.hardware.config";
      readOnly = true;
    };
  };

  config = {
    hardware.raspberry-pi.config-generated = render-raspberrypi-config cfg.config;
  };
}